.set {
	list-style: none;
	padding: 0;
	margin: 0;
}

// use the float model to align items
.set-float {
	.clearfix();
	> li {
		float: left;
	}
}

// use inline block to align items, spaces between elements will probably give problems
.set-inline > li {
	display: inline-block;
	vertical-align: top; /* float and flex do this by default */
}

// use flexbox to align items
.set-flex {
	display: flex;
	flex-wrap: wrap;
}

// "Removes" the negative margin from the set, doesn't work for sets based on floats
.set-container-inline {
	display: inline-block;
	width: 100%;
}

// "Removes" the negative margin from the set but requires an additional div
.set-container-float {
	.clearfix();
	> div {
		float: left;
		width: 100%;
	}
}

// "Removes" the negative margin from the set
.set-container-flex {
	display: flex;
	> .set {
		flex-grow: 1;
	}
}

// create set containers
.set-loop(length(@sizes));
.set-loop(@n, @i: 1) when (@i <= @n) {
	.set-each(extract(@sizes, @i));
	.set-loop(@n, @i + 1);
}
.set-each(@size) {
	@spacing: @@temp; @temp: 'spacing-@{size}';
	.set-@{size} {
		margin: -@spacing/2;
		> li {
			padding: @spacing/2;
		}
	}
}

// create set elements
.grid-loop(@grid-size);
.grid-loop(@n, @i: 1, @all: ~'.col-1') when (@i <= @n) {
	.grid-each(@i, @n);
	@{all} when (@i = @n) { min-height: 1px; }
	@next-i: @i + 1;
	.grid-loop(@n, @next-i, ~'@{all}, .col-@{next-i}');
}
.grid-each(@size, @n) {
	.col-@{size} { width: percentage(@size/@n); }
}